// Copyright (C) Developed by Pask, Published by Dark Tower Interactive SRL 2024. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "EditorSubsystem.h"
#include "Misc/Paths.h"

#include "ACFGASEditorSubsystem.generated.h"

struct FFilePath;

/**
 * Editor subsystem for generating and managing C++ files related to GAS AttributeSets.
 * Allows creating new AttributeSet header and source files directly from the editor.
 */
UCLASS()
class ASCENTGASEDITOR_API UACFGASEditorSubsystem : public UEditorSubsystem {
    GENERATED_BODY()

public:
    UACFGASEditorSubsystem();

    /**
     * Creates .h and .cpp files for a new AttributeSet with the given attributes.
     *
     * @param headerPath The directory where the files should be generated.
     * @param attributeSetName The name of the new AttributeSet class.
     * @param attributes A list of attribute names to include in the set.
     * @return True if the files were successfully created.
     */
    UFUNCTION(BlueprintCallable, Category = ACF)
    bool CreateAttributeFiles(const FDirectoryPath& headerPath, const FString& attributeSetName, const TArray<FString>& attributes);

    /**
     * Checks whether the given file is a valid AttributeSet header generated by this system.
     *
     * @param filePath The path to the file to validate.
     * @return True if the file is a valid AttributeSet header.
     */
    UFUNCTION(BlueprintCallable, Category = ACF)
    bool IsValidAttributeFile(const FFilePath& filePath);

    /**
     * Extracts the class name and attribute names from a previously generated AttributeSet file.
     *
     * @param filePath The file to parse.
     * @param outAttributeSetName Output parameter to receive the name of the AttributeSet.
     * @param outAttributes Output parameter to receive the list of attribute names.
     * @return True if the file was successfully parsed.
     */
    UFUNCTION(BlueprintCallable, Category = ACF)
    bool ExtractAttributesFromAttributeFile(const FFilePath& filePath, FString& outAttributeSetName, TArray<FString>& outAttributes);

    /**
     * Gets the default directory path where new AttributeSet files should be generated.
     *
     * @return A directory path pointing to the default generation folder.
     */
    UFUNCTION(BlueprintCallable, Category = ACF)
    FDirectoryPath GetDefaultHeaderPath() const;

private:
    bool CreateAttributesCppFile(const FDirectoryPath& headerPath, const FString& attributeSetName, const TArray<FString>& attributes);

    bool CreateAttributesHeaderFile(const FDirectoryPath& headerPath, const FString& attributeSetName, const TArray<FString>& attributes);

    bool GetModuleNameFromPath(const FString& FilePath, FString& outModuleName);
    void AddDependenciesToBuildCS(const FString& moduleName);

    void AddDependency(FString& FileContent, FString dependency, int32 InsertIndex, FString BuildFilePath);
};
